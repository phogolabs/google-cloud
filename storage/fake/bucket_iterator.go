// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"sync"

	storagea "cloud.google.com/go/storage"
	"github.com/phogolabs/google-cloud/storage"
	"google.golang.org/api/iterator"
)

type FakeBucketIterator struct {
	NextStub        func() (*storagea.BucketAttrs, error)
	nextMutex       sync.RWMutex
	nextArgsForCall []struct {
	}
	nextReturns struct {
		result1 *storagea.BucketAttrs
		result2 error
	}
	nextReturnsOnCall map[int]struct {
		result1 *storagea.BucketAttrs
		result2 error
	}
	PageInfoStub        func() *iterator.PageInfo
	pageInfoMutex       sync.RWMutex
	pageInfoArgsForCall []struct {
	}
	pageInfoReturns struct {
		result1 *iterator.PageInfo
	}
	pageInfoReturnsOnCall map[int]struct {
		result1 *iterator.PageInfo
	}
	SetPrefixStub        func(string)
	setPrefixMutex       sync.RWMutex
	setPrefixArgsForCall []struct {
		arg1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBucketIterator) Next() (*storagea.BucketAttrs, error) {
	fake.nextMutex.Lock()
	ret, specificReturn := fake.nextReturnsOnCall[len(fake.nextArgsForCall)]
	fake.nextArgsForCall = append(fake.nextArgsForCall, struct {
	}{})
	stub := fake.NextStub
	fakeReturns := fake.nextReturns
	fake.recordInvocation("Next", []interface{}{})
	fake.nextMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBucketIterator) NextCallCount() int {
	fake.nextMutex.RLock()
	defer fake.nextMutex.RUnlock()
	return len(fake.nextArgsForCall)
}

func (fake *FakeBucketIterator) NextCalls(stub func() (*storagea.BucketAttrs, error)) {
	fake.nextMutex.Lock()
	defer fake.nextMutex.Unlock()
	fake.NextStub = stub
}

func (fake *FakeBucketIterator) NextReturns(result1 *storagea.BucketAttrs, result2 error) {
	fake.nextMutex.Lock()
	defer fake.nextMutex.Unlock()
	fake.NextStub = nil
	fake.nextReturns = struct {
		result1 *storagea.BucketAttrs
		result2 error
	}{result1, result2}
}

func (fake *FakeBucketIterator) NextReturnsOnCall(i int, result1 *storagea.BucketAttrs, result2 error) {
	fake.nextMutex.Lock()
	defer fake.nextMutex.Unlock()
	fake.NextStub = nil
	if fake.nextReturnsOnCall == nil {
		fake.nextReturnsOnCall = make(map[int]struct {
			result1 *storagea.BucketAttrs
			result2 error
		})
	}
	fake.nextReturnsOnCall[i] = struct {
		result1 *storagea.BucketAttrs
		result2 error
	}{result1, result2}
}

func (fake *FakeBucketIterator) PageInfo() *iterator.PageInfo {
	fake.pageInfoMutex.Lock()
	ret, specificReturn := fake.pageInfoReturnsOnCall[len(fake.pageInfoArgsForCall)]
	fake.pageInfoArgsForCall = append(fake.pageInfoArgsForCall, struct {
	}{})
	stub := fake.PageInfoStub
	fakeReturns := fake.pageInfoReturns
	fake.recordInvocation("PageInfo", []interface{}{})
	fake.pageInfoMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBucketIterator) PageInfoCallCount() int {
	fake.pageInfoMutex.RLock()
	defer fake.pageInfoMutex.RUnlock()
	return len(fake.pageInfoArgsForCall)
}

func (fake *FakeBucketIterator) PageInfoCalls(stub func() *iterator.PageInfo) {
	fake.pageInfoMutex.Lock()
	defer fake.pageInfoMutex.Unlock()
	fake.PageInfoStub = stub
}

func (fake *FakeBucketIterator) PageInfoReturns(result1 *iterator.PageInfo) {
	fake.pageInfoMutex.Lock()
	defer fake.pageInfoMutex.Unlock()
	fake.PageInfoStub = nil
	fake.pageInfoReturns = struct {
		result1 *iterator.PageInfo
	}{result1}
}

func (fake *FakeBucketIterator) PageInfoReturnsOnCall(i int, result1 *iterator.PageInfo) {
	fake.pageInfoMutex.Lock()
	defer fake.pageInfoMutex.Unlock()
	fake.PageInfoStub = nil
	if fake.pageInfoReturnsOnCall == nil {
		fake.pageInfoReturnsOnCall = make(map[int]struct {
			result1 *iterator.PageInfo
		})
	}
	fake.pageInfoReturnsOnCall[i] = struct {
		result1 *iterator.PageInfo
	}{result1}
}

func (fake *FakeBucketIterator) SetPrefix(arg1 string) {
	fake.setPrefixMutex.Lock()
	fake.setPrefixArgsForCall = append(fake.setPrefixArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SetPrefixStub
	fake.recordInvocation("SetPrefix", []interface{}{arg1})
	fake.setPrefixMutex.Unlock()
	if stub != nil {
		fake.SetPrefixStub(arg1)
	}
}

func (fake *FakeBucketIterator) SetPrefixCallCount() int {
	fake.setPrefixMutex.RLock()
	defer fake.setPrefixMutex.RUnlock()
	return len(fake.setPrefixArgsForCall)
}

func (fake *FakeBucketIterator) SetPrefixCalls(stub func(string)) {
	fake.setPrefixMutex.Lock()
	defer fake.setPrefixMutex.Unlock()
	fake.SetPrefixStub = stub
}

func (fake *FakeBucketIterator) SetPrefixArgsForCall(i int) string {
	fake.setPrefixMutex.RLock()
	defer fake.setPrefixMutex.RUnlock()
	argsForCall := fake.setPrefixArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBucketIterator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nextMutex.RLock()
	defer fake.nextMutex.RUnlock()
	fake.pageInfoMutex.RLock()
	defer fake.pageInfoMutex.RUnlock()
	fake.setPrefixMutex.RLock()
	defer fake.setPrefixMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBucketIterator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.BucketIterator = new(FakeBucketIterator)
