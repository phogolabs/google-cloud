// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"github.com/phogolabs/google-cloud/storage"
)

type FakeClient struct {
	BucketStub        func(string) storage.BucketHandle
	bucketMutex       sync.RWMutex
	bucketArgsForCall []struct {
		arg1 string
	}
	bucketReturns struct {
		result1 storage.BucketHandle
	}
	bucketReturnsOnCall map[int]struct {
		result1 storage.BucketHandle
	}
	BucketsStub        func(context.Context, string) storage.BucketIterator
	bucketsMutex       sync.RWMutex
	bucketsArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	bucketsReturns struct {
		result1 storage.BucketIterator
	}
	bucketsReturnsOnCall map[int]struct {
		result1 storage.BucketIterator
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) Bucket(arg1 string) storage.BucketHandle {
	fake.bucketMutex.Lock()
	ret, specificReturn := fake.bucketReturnsOnCall[len(fake.bucketArgsForCall)]
	fake.bucketArgsForCall = append(fake.bucketArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.BucketStub
	fakeReturns := fake.bucketReturns
	fake.recordInvocation("Bucket", []interface{}{arg1})
	fake.bucketMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) BucketCallCount() int {
	fake.bucketMutex.RLock()
	defer fake.bucketMutex.RUnlock()
	return len(fake.bucketArgsForCall)
}

func (fake *FakeClient) BucketCalls(stub func(string) storage.BucketHandle) {
	fake.bucketMutex.Lock()
	defer fake.bucketMutex.Unlock()
	fake.BucketStub = stub
}

func (fake *FakeClient) BucketArgsForCall(i int) string {
	fake.bucketMutex.RLock()
	defer fake.bucketMutex.RUnlock()
	argsForCall := fake.bucketArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) BucketReturns(result1 storage.BucketHandle) {
	fake.bucketMutex.Lock()
	defer fake.bucketMutex.Unlock()
	fake.BucketStub = nil
	fake.bucketReturns = struct {
		result1 storage.BucketHandle
	}{result1}
}

func (fake *FakeClient) BucketReturnsOnCall(i int, result1 storage.BucketHandle) {
	fake.bucketMutex.Lock()
	defer fake.bucketMutex.Unlock()
	fake.BucketStub = nil
	if fake.bucketReturnsOnCall == nil {
		fake.bucketReturnsOnCall = make(map[int]struct {
			result1 storage.BucketHandle
		})
	}
	fake.bucketReturnsOnCall[i] = struct {
		result1 storage.BucketHandle
	}{result1}
}

func (fake *FakeClient) Buckets(arg1 context.Context, arg2 string) storage.BucketIterator {
	fake.bucketsMutex.Lock()
	ret, specificReturn := fake.bucketsReturnsOnCall[len(fake.bucketsArgsForCall)]
	fake.bucketsArgsForCall = append(fake.bucketsArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.BucketsStub
	fakeReturns := fake.bucketsReturns
	fake.recordInvocation("Buckets", []interface{}{arg1, arg2})
	fake.bucketsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) BucketsCallCount() int {
	fake.bucketsMutex.RLock()
	defer fake.bucketsMutex.RUnlock()
	return len(fake.bucketsArgsForCall)
}

func (fake *FakeClient) BucketsCalls(stub func(context.Context, string) storage.BucketIterator) {
	fake.bucketsMutex.Lock()
	defer fake.bucketsMutex.Unlock()
	fake.BucketsStub = stub
}

func (fake *FakeClient) BucketsArgsForCall(i int) (context.Context, string) {
	fake.bucketsMutex.RLock()
	defer fake.bucketsMutex.RUnlock()
	argsForCall := fake.bucketsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) BucketsReturns(result1 storage.BucketIterator) {
	fake.bucketsMutex.Lock()
	defer fake.bucketsMutex.Unlock()
	fake.BucketsStub = nil
	fake.bucketsReturns = struct {
		result1 storage.BucketIterator
	}{result1}
}

func (fake *FakeClient) BucketsReturnsOnCall(i int, result1 storage.BucketIterator) {
	fake.bucketsMutex.Lock()
	defer fake.bucketsMutex.Unlock()
	fake.BucketsStub = nil
	if fake.bucketsReturnsOnCall == nil {
		fake.bucketsReturnsOnCall = make(map[int]struct {
			result1 storage.BucketIterator
		})
	}
	fake.bucketsReturnsOnCall[i] = struct {
		result1 storage.BucketIterator
	}{result1}
}

func (fake *FakeClient) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeClient) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeClient) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bucketMutex.RLock()
	defer fake.bucketMutex.RUnlock()
	fake.bucketsMutex.RLock()
	defer fake.bucketsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.Client = new(FakeClient)
