// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	storagea "cloud.google.com/go/storage"
	"github.com/phogolabs/google-cloud/storage"
)

type FakeComposer struct {
	ObjectAttrsStub        func() *storagea.ObjectAttrs
	objectAttrsMutex       sync.RWMutex
	objectAttrsArgsForCall []struct {
	}
	objectAttrsReturns struct {
		result1 *storagea.ObjectAttrs
	}
	objectAttrsReturnsOnCall map[int]struct {
		result1 *storagea.ObjectAttrs
	}
	RunStub        func(context.Context) (*storagea.ObjectAttrs, error)
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		arg1 context.Context
	}
	runReturns struct {
		result1 *storagea.ObjectAttrs
		result2 error
	}
	runReturnsOnCall map[int]struct {
		result1 *storagea.ObjectAttrs
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeComposer) ObjectAttrs() *storagea.ObjectAttrs {
	fake.objectAttrsMutex.Lock()
	ret, specificReturn := fake.objectAttrsReturnsOnCall[len(fake.objectAttrsArgsForCall)]
	fake.objectAttrsArgsForCall = append(fake.objectAttrsArgsForCall, struct {
	}{})
	stub := fake.ObjectAttrsStub
	fakeReturns := fake.objectAttrsReturns
	fake.recordInvocation("ObjectAttrs", []interface{}{})
	fake.objectAttrsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeComposer) ObjectAttrsCallCount() int {
	fake.objectAttrsMutex.RLock()
	defer fake.objectAttrsMutex.RUnlock()
	return len(fake.objectAttrsArgsForCall)
}

func (fake *FakeComposer) ObjectAttrsCalls(stub func() *storagea.ObjectAttrs) {
	fake.objectAttrsMutex.Lock()
	defer fake.objectAttrsMutex.Unlock()
	fake.ObjectAttrsStub = stub
}

func (fake *FakeComposer) ObjectAttrsReturns(result1 *storagea.ObjectAttrs) {
	fake.objectAttrsMutex.Lock()
	defer fake.objectAttrsMutex.Unlock()
	fake.ObjectAttrsStub = nil
	fake.objectAttrsReturns = struct {
		result1 *storagea.ObjectAttrs
	}{result1}
}

func (fake *FakeComposer) ObjectAttrsReturnsOnCall(i int, result1 *storagea.ObjectAttrs) {
	fake.objectAttrsMutex.Lock()
	defer fake.objectAttrsMutex.Unlock()
	fake.ObjectAttrsStub = nil
	if fake.objectAttrsReturnsOnCall == nil {
		fake.objectAttrsReturnsOnCall = make(map[int]struct {
			result1 *storagea.ObjectAttrs
		})
	}
	fake.objectAttrsReturnsOnCall[i] = struct {
		result1 *storagea.ObjectAttrs
	}{result1}
}

func (fake *FakeComposer) Run(arg1 context.Context) (*storagea.ObjectAttrs, error) {
	fake.runMutex.Lock()
	ret, specificReturn := fake.runReturnsOnCall[len(fake.runArgsForCall)]
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.RunStub
	fakeReturns := fake.runReturns
	fake.recordInvocation("Run", []interface{}{arg1})
	fake.runMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeComposer) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeComposer) RunCalls(stub func(context.Context) (*storagea.ObjectAttrs, error)) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = stub
}

func (fake *FakeComposer) RunArgsForCall(i int) context.Context {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	argsForCall := fake.runArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeComposer) RunReturns(result1 *storagea.ObjectAttrs, result2 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 *storagea.ObjectAttrs
		result2 error
	}{result1, result2}
}

func (fake *FakeComposer) RunReturnsOnCall(i int, result1 *storagea.ObjectAttrs, result2 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	if fake.runReturnsOnCall == nil {
		fake.runReturnsOnCall = make(map[int]struct {
			result1 *storagea.ObjectAttrs
			result2 error
		})
	}
	fake.runReturnsOnCall[i] = struct {
		result1 *storagea.ObjectAttrs
		result2 error
	}{result1, result2}
}

func (fake *FakeComposer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.objectAttrsMutex.RLock()
	defer fake.objectAttrsMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeComposer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.Composer = new(FakeComposer)
